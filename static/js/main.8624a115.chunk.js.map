{"version":3,"sources":["generated/graphql.tsx","components/SearchCityForm.tsx","components/WeatherData.tsx","App.tsx","index.tsx"],"names":["Unit","Language","CacheControlScope","SearchCityForm","changeCityToSearch","useState","inputValue","setInputValue","className","type","placeholder","value","onChange","e","target","onClick","WeatherDataDocument","gql","WeatherData","baseOptions","city","variables","name","Apollo","data","loading","getCityByName","country","weather","summary","description","Math","round","Number","temperature","actual","App","setCity","Date","toLocaleDateString","weekday","month","day","newCity","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","document","getElementById"],"mappings":"qKA8FYA,EAMAC,EAoDAC,E,+CC7HGC,EArByB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,mBAAyB,EAC9BC,mBAAS,IADqB,mBAC3DC,EAD2D,KAC/CC,EAD+C,KAQlE,OACE,sBAAKC,UAAU,iBAAf,UACE,uBACEC,KAAK,OACLC,YAAY,eACZC,MAAOL,EACPM,SAAU,SAACC,GAAD,OAAON,EAAcM,EAAEC,OAAOH,UAE1C,wBAAQI,QAbgB,WAC1BX,EAAmBE,GACnBC,EAAc,KAWZ,wB,kBDwEMP,K,gBAAAA,E,oBAAAA,E,iBAAAA,M,cAMAC,K,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,aAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,QAAAA,E,aAAAA,E,aAAAA,E,SAAAA,M,cAoDAC,K,gBAAAA,E,mBAAAA,M,KA8BL,IAAMc,EAAsBC,cAAH,2PE/KhC,IA4BeC,EA5BsB,SAAC,GAAc,IAAD,QFgNfC,EEhNIC,EAAW,EAAXA,KAAW,GFgNfD,EE/MY,CAC5CE,UAAW,CAAEC,KAAMF,IF+MRG,WAA6DP,EAAqBG,IEhNvFK,EADyC,EACzCA,KAIR,OALiD,EACnCC,QAKL,kDAGL,OAACD,QAAD,IAACA,OAAD,EAACA,EAAME,eAGT,sBAAKlB,UAAU,cAAf,UACE,+BACGgB,EAAKE,cAAcJ,KADtB,KAC8BE,EAAKE,cAAcC,WAGjD,uCAAKH,EAAKE,cAAcE,eAAxB,iBAAK,EAA4BC,eAAjC,aAAK,EAAqCC,cAE1C,8CACe,IACZC,KAAKC,MAAMC,OAAM,UAACT,EAAKE,cAAcE,eAApB,iBAAC,EAA4BM,mBAA7B,aAAC,EAAyCC,QAAU,QAFxE,aAV6B,uDCcpBC,EA1BH,WAAO,IAAD,EACQ/B,mBAAiB,YADzB,mBACTe,EADS,KACHiB,EADG,KAOhB,OACE,sBAAK7B,UAAU,MAAf,UACE,6CAEA,oBAAIA,UAAU,OAAd,UACG,IAAI8B,MAAOC,mBAAmB,QAAS,CACtCC,QAAS,OACTC,MAAO,QACPC,IAAK,cAIT,uBACA,cAAC,EAAD,CAAgBtC,mBAjBO,SAACuC,GAC1BN,EAAQM,MAiBN,cAAC,EAAD,CAAavB,KAAMA,QClBnBwB,G,MAAS,IAAIC,eAAa,CAC9BC,IAAK,6CACLC,MAAO,IAAIC,mBAGbC,IAASC,OACP,cAAC,iBAAD,CAAgBN,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.8624a115.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\n\nexport type City = {\n  __typename?: 'City';\n  id?: Maybe<Scalars['ID']>;\n  name?: Maybe<Scalars['String']>;\n  country?: Maybe<Scalars['String']>;\n  coord?: Maybe<Coordinates>;\n  weather?: Maybe<Weather>;\n};\n\nexport type Coordinates = {\n  __typename?: 'Coordinates';\n  lon?: Maybe<Scalars['Float']>;\n  lat?: Maybe<Scalars['Float']>;\n};\n\nexport type Summary = {\n  __typename?: 'Summary';\n  title?: Maybe<Scalars['String']>;\n  description?: Maybe<Scalars['String']>;\n  icon?: Maybe<Scalars['String']>;\n};\n\nexport type Temperature = {\n  __typename?: 'Temperature';\n  actual?: Maybe<Scalars['Float']>;\n  feelsLike?: Maybe<Scalars['Float']>;\n  min?: Maybe<Scalars['Float']>;\n  max?: Maybe<Scalars['Float']>;\n};\n\nexport type Wind = {\n  __typename?: 'Wind';\n  speed?: Maybe<Scalars['Float']>;\n  deg?: Maybe<Scalars['Int']>;\n};\n\nexport type Clouds = {\n  __typename?: 'Clouds';\n  all?: Maybe<Scalars['Int']>;\n  visibility?: Maybe<Scalars['Int']>;\n  humidity?: Maybe<Scalars['Int']>;\n};\n\nexport type Weather = {\n  __typename?: 'Weather';\n  summary?: Maybe<Summary>;\n  temperature?: Maybe<Temperature>;\n  wind?: Maybe<Wind>;\n  clouds?: Maybe<Clouds>;\n  timestamp?: Maybe<Scalars['Int']>;\n};\n\nexport type ConfigInput = {\n  units?: Maybe<Unit>;\n  lang?: Maybe<Language>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  getCityByName?: Maybe<City>;\n  getCityById?: Maybe<Array<Maybe<City>>>;\n};\n\n\nexport type QueryGetCityByNameArgs = {\n  name: Scalars['String'];\n  country?: Maybe<Scalars['String']>;\n  config?: Maybe<ConfigInput>;\n};\n\n\nexport type QueryGetCityByIdArgs = {\n  id?: Maybe<Array<Scalars['String']>>;\n  config?: Maybe<ConfigInput>;\n};\n\nexport enum Unit {\n  Metric = 'metric',\n  Imperial = 'imperial',\n  Kelvin = 'kelvin'\n}\n\nexport enum Language {\n  Af = 'af',\n  Al = 'al',\n  Ar = 'ar',\n  Az = 'az',\n  Bg = 'bg',\n  Ca = 'ca',\n  Cz = 'cz',\n  Da = 'da',\n  De = 'de',\n  El = 'el',\n  En = 'en',\n  Eu = 'eu',\n  Fa = 'fa',\n  Fi = 'fi',\n  Fr = 'fr',\n  Gl = 'gl',\n  He = 'he',\n  Hi = 'hi',\n  Hr = 'hr',\n  Hu = 'hu',\n  Id = 'id',\n  It = 'it',\n  Ja = 'ja',\n  Kr = 'kr',\n  La = 'la',\n  Lt = 'lt',\n  Mk = 'mk',\n  No = 'no',\n  Nl = 'nl',\n  Pl = 'pl',\n  Pt = 'pt',\n  PtBr = 'pt_br',\n  Ro = 'ro',\n  Ru = 'ru',\n  Sv = 'sv',\n  Se = 'se',\n  Sk = 'sk',\n  Sl = 'sl',\n  Sp = 'sp',\n  Es = 'es',\n  Sr = 'sr',\n  Th = 'th',\n  Tr = 'tr',\n  Ua = 'ua',\n  Uk = 'uk',\n  Vi = 'vi',\n  ZhCn = 'zh_cn',\n  ZhTw = 'zh_tw',\n  Zu = 'zu'\n}\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\n\nexport type WeatherDataQueryVariables = Exact<{\n  name: Scalars['String'];\n}>;\n\n\nexport type WeatherDataQuery = (\n  { __typename?: 'Query' }\n  & { getCityByName?: Maybe<(\n    { __typename?: 'City' }\n    & Pick<City, 'name' | 'country'>\n    & { weather?: Maybe<(\n      { __typename?: 'Weather' }\n      & { summary?: Maybe<(\n        { __typename?: 'Summary' }\n        & Pick<Summary, 'description'>\n      )>, temperature?: Maybe<(\n        { __typename?: 'Temperature' }\n        & Pick<Temperature, 'actual'>\n      )> }\n    )> }\n  )> }\n);\n\n\nexport const WeatherDataDocument = gql`\n    query WeatherData($name: String!) {\n  getCityByName(name: $name) {\n    name\n    country\n    weather {\n      summary {\n        description\n      }\n      temperature {\n        actual\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useWeatherDataQuery__\n *\n * To run a query within a React component, call `useWeatherDataQuery` and pass it any options that fit your needs.\n * When your component renders, `useWeatherDataQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWeatherDataQuery({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useWeatherDataQuery(baseOptions: Apollo.QueryHookOptions<WeatherDataQuery, WeatherDataQueryVariables>) {\n        return Apollo.useQuery<WeatherDataQuery, WeatherDataQueryVariables>(WeatherDataDocument, baseOptions);\n      }\nexport function useWeatherDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<WeatherDataQuery, WeatherDataQueryVariables>) {\n          return Apollo.useLazyQuery<WeatherDataQuery, WeatherDataQueryVariables>(WeatherDataDocument, baseOptions);\n        }\nexport type WeatherDataQueryHookResult = ReturnType<typeof useWeatherDataQuery>;\nexport type WeatherDataLazyQueryHookResult = ReturnType<typeof useWeatherDataLazyQuery>;\nexport type WeatherDataQueryResult = Apollo.QueryResult<WeatherDataQuery, WeatherDataQueryVariables>;","import React, { useState } from 'react';\r\n\r\ntype Props = {\r\n  changeCityToSearch: (city: string) => void;\r\n};\r\n\r\nconst SearchCityForm: React.FC<Props> = ({ changeCityToSearch }) => {\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const onSearchButtonClick = () => {\r\n    changeCityToSearch(inputValue);\r\n    setInputValue('');\r\n  };\r\n\r\n  return (\r\n    <div className='SearchCityForm'>\r\n      <input\r\n        type='text'\r\n        placeholder='City name...'\r\n        value={inputValue}\r\n        onChange={(e) => setInputValue(e.target.value)}\r\n      />\r\n      <button onClick={onSearchButtonClick}>Search</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchCityForm;\r\n","import React from 'react';\r\nimport { useWeatherDataQuery } from '../generated/graphql';\r\n\r\ntype Props = {\r\n  city: string;\r\n};\r\n\r\nconst WeatherData: React.FC<Props> = ({ city }) => {\r\n  const { data, loading } = useWeatherDataQuery({\r\n    variables: { name: city },\r\n  });\r\n\r\n  if (loading) {\r\n    return <h1>Loading data...</h1>;\r\n  }\r\n\r\n  if (!data?.getCityByName) return <h1>Ð¡ity not found!</h1>;\r\n\r\n  return (\r\n    <div className='WeatherData'>\r\n      <h2>\r\n        {data.getCityByName.name}, {data.getCityByName.country}\r\n      </h2>\r\n\r\n      <h3>{data.getCityByName.weather?.summary?.description}</h3>\r\n\r\n      <h3>\r\n        Temperature:{' '}\r\n        {Math.round(Number(data.getCityByName.weather?.temperature?.actual) - 273.15)}\r\n        &deg;\r\n      </h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherData;\r\n","import React, { useState } from 'react';\nimport SearchCityForm from './components/SearchCityForm';\nimport WeatherData from './components/WeatherData';\n\nconst App = () => {\n  const [city, setCity] = useState<string>('Uzhhorod');\n\n  const changeCityToSearch = (newCity: string) => {\n    setCity(newCity);\n  };\n\n  return (\n    <div className='App'>\n      <h1>Weather App</h1>\n\n      <h4 className='date'>\n        {new Date().toLocaleDateString('en-US', {\n          weekday: 'long',\n          month: 'short',\n          day: 'numeric',\n        })}\n      </h4>\n\n      <hr />\n      <SearchCityForm changeCityToSearch={changeCityToSearch} />\n      <WeatherData city={city} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider, ApolloClient, InMemoryCache } from '@apollo/client';\n\nimport App from './App';\nimport './index.css';\n\nconst client = new ApolloClient({\n  uri: 'https://graphql-weather-api.herokuapp.com/',\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}